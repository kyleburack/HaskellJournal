Blog Week 5

Work Cycle

Generate a parser:
Used for us on LambdaNat0 for a parser to generate use following comands:

bnfc -m -haskell LambdaNat0.cf
  make
  
to parse a program:
 echo "\x.x y z" | ./TestLambdaNat
 
Building an Interpreter:
asically takes the code and makes it readable

 cp grammar/*.hs src 
  stack build
  
exec:
 stack exec LambdaNat-exe test/myprogram.lc

\x.x -- the identity function (returns its argument)
\x.\y.x -- the function that takes two arguments and returns the first
\x.\y.y -- the function that takes two arguments and returns the second

The Work Cycle that is used to add features to, say, LambdaNat0 is the following. I highlighted in bold the two steps that require actual work, the others steps are just for organisation and bookkeeping.

Here we assume that we have LambdaNatOLD and want to build a new language called LambdaNatNEW. (First time you come here "OLD" is "0" and "NEW" is "1". "OLD" and "NEW" are place-holders for version numbers.)

